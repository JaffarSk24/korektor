<!DOCTYPE html>
<html lang="sk">
<head>
  <meta charset="UTF-8" />
  <title>Korektor slovenƒçiny ‚Äî White Eagles & Co.</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root{--primary:#4c536d;--accent:#ff500c}
    body{font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial;background:#f7f8fa;color:var(--primary);margin:18px}
    h1{font-size:20px;margin:0 0 10px}
    .grid{display:grid;grid-template-columns:1fr 1fr;gap:18px;align-items:start;max-width:1100px}
    .card{background:#fff;padding:14px;border-radius:12px;box-shadow:0 6px 18px rgba(0,0,0,0.04)}
    textarea{width:100%;height:15rem;padding:14px;border-radius:12px;border:1px solid #e5e7eb;background:#fff;resize:vertical;line-height:1.5;white-space:pre-wrap;word-break:normal;overflow-wrap:break-word;font-size:15px}
    .output{width:100%;height:15rem;padding:14px;border-radius:12px;border:1px solid #e5e7eb;background:#fff;overflow:auto;position:relative}
    .error-underline{background-color:rgba(255,80,12,0.25);border-radius:3px;cursor:pointer;padding:1px 2px}
    .word-replaced{background-color:rgba(76,83,109,0.06)}
    .btn-accent{background:var(--accent);color:#fff;border:0;padding:8px 12px;border-radius:999px;cursor:pointer}
    .apply-used{background:#ccc !important;color:#666 !important;cursor:not-allowed}
    .fade-in{animation:fadeInUp .32s ease}
    @keyframes fadeInUp{from{opacity:0;transform:translateY(6px)}to{opacity:1;transform:none}}
    .fade-out{animation:fadeOutUp .32s ease forwards}
    @keyframes fadeOutUp{from{opacity:1}to{opacity:0;transform:translateY(-10px)}}
    .suggest-menu{position:absolute;background:#fff;border:1px solid #e5e7eb;border-radius:8px;box-shadow:0 6px 18px rgba(0,0,0,0.12);z-index:999;display:none;overflow:hidden}
    .suggest-option{padding:8px 12px;cursor:pointer;white-space:nowrap}
    .suggest-option:hover{background:rgba(255,80,12,0.06)}
    /* copy icon & toast */
    .copy-btn{position:absolute;top:10px;right:10px;background:transparent;border:0;padding:6px;border-radius:6px;color:#6b7280;cursor:pointer;transform:scale(0.8);z-index:20}
    .copy-btn:hover{background:rgba(255,80,12,0.06);color:var(--accent)}
    .copy-toast{position:absolute;right:10px;background:var(--primary);color:#fff;padding:6px 10px;border-radius:8px;font-size:13px;opacity:0;transform:translateY(-6px);transition:opacity .18s,transform .18s;pointer-events:none;z-index:25}
    .copy-toast.show{opacity:1;transform:none}
    .errors-list{display:flex;flex-direction:column;gap:12px}
    .meta{color:#6b7280;font-size:13px;margin-top:12px}
  </style>
</head>
<body>
  <h1>üîé Korektor slovenƒçiny ‚Äî White Eagles & Co.</h1>
  <p class="meta">Nap√≠≈°te text do ƒæav√©ho poƒæa. N√°vrhy sa naƒç√≠taj√∫ z backendu (/api/check). Kliknite na podƒçiarknut√© slov√° alebo pou≈æite tlaƒçidlo Pou≈æi≈•.</p>

  <div class="grid">
    <div style="position:relative">
      <textarea id="inputText">Moja macka je pekna. Prosim ta, poƒçkaj chv√≠ƒæu.</textarea>
      <button id="copyBtn" class="copy-btn" title="Skop√≠rova≈• text" aria-label="Skop√≠rova≈•">
        <!-- two-pages icon -->
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="copy-icon">
          <rect x="5" y="6" width="11" height="13" rx="2" stroke="currentColor" stroke-width="1.4"/>
          <rect x="8" y="4" width="11" height="13" rx="2" stroke="currentColor" stroke-width="1.4"/>
        </svg>
      </button>
      <div id="copyToast" class="copy-toast" style="top:48px;display:block;opacity:0">Skop√≠rovan√©</div>
    </div>

    <div class="output" id="outputText" aria-live="polite">
      <!-- rendered suggestions -->
    </div>
  </div>

  <h2 style="margin-top:18px">N√°jden√© probl√©my</h2>
  <div id="errors" class="errors-list"></div>

  <div id="suggestMenu" class="suggest-menu" role="menu" aria-hidden="true"></div>

<script>
/* --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --- */
const API = "/api"; // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fetch(`${API}/check`)

/* --- –≠–ª–µ–º–µ–Ω—Ç—ã --- */
const inputEl = document.getElementById('inputText');
const outputEl = document.getElementById('outputText');
const errorsContainer = document.getElementById('errors');
const menu = document.getElementById('suggestMenu');
const copyBtn = document.getElementById('copyBtn');
const copyToast = document.getElementById('copyToast');

let lastMatches = [];
let correctedText = '';

/* --- –£—Ç–∏–ª–∏—Ç—ã --- */
const escapeHtml = s => (s||'').replace(/[&<>\"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',"'":'&#39;'}[c]));
function debounce(fn, wait){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), wait); }; }

/* --- –†–µ–Ω–¥–µ—Ä –ø—Ä–∞–≤–æ–≥–æ –±–ª–æ–∫–∞ –∏ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ –∏–∑ matches --- */
function renderFromApiText(text, matches){
  matches = (matches||[]).slice().sort((a,b)=>a.offset - b.offset);
  let html = '', pos = 0;
  matches.forEach((m, i) => {
    if (m.offset < pos) return; // –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    html += escapeHtml(text.slice(pos, m.offset));
    const wrong = text.slice(m.offset, m.offset + m.length);
    const suggestions = (m.replacements && m.replacements.length) ? m.replacements.map(r => r.value || r).join('|') : '';
    const id = `err-${i}`;
    html += `<span id="${id}" class="error-underline" data-suggest="${escapeHtml(suggestions)}" data-offset="${m.offset}" data-length="${m.length}" data-key="${escapeHtml(wrong.toLowerCase())}" data-idx="${i}">${escapeHtml(wrong)}</span>`;
    pos = m.offset + m.length;
  });
  html += escapeHtml(text.slice(pos));
  outputEl.innerHTML = html;

  // –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—à–∏–±–æ–∫ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–ª—é—á)
  const map = {};
  matches.forEach(m => {
    const wrong = text.slice(m.offset, m.offset + m.length);
    const key = wrong.toLowerCase();
    if (map[key]) return;
    map[key] = m;
  });

  errorsContainer.innerHTML = '';
  Object.keys(map).forEach(key => {
    const m = map[key];
    const first = (m.replacements && m.replacements[0] && (m.replacements[0].value || m.replacements[0])) || '';
    const card = document.createElement('div');
    card.className = 'card fade-in';
    card.dataset.key = key;
    card.innerHTML = `
      <div style="display:flex;justify-content:space-between;align-items:center">
        <strong style="font-size:14px">${escapeHtml(text.slice(m.offset, m.offset + m.length))} ‚Üí ${escapeHtml(first)}</strong>
        <button class="apply btn-accent">${first ? 'Pou≈æi≈•' : 'Navrhn√∫≈•'}</button>
      </div>
      <div style="margin-top:8px;color:#6b7280;font-size:13px">${escapeHtml(m.message || 'Navrhnut√© opravy')}</div>
    `;
    errorsContainer.appendChild(card);
  });

  // –±–∏–Ω–¥—ã
  recomputeOffsetsFromOutput();
  bindErrorSpans();
  bindApplyButtons();
}

/* --- –ü–æ–ª—É—á–∞–µ–º –ø–ª–æ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–∞–≤–æ–≥–æ –±–ª–æ–∫–∞ --- */
function getOutputPlainText(){
  let text = '';
  outputEl.childNodes.forEach(n => text += n.textContent);
  return text;
}

/* --- –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å offsets –¥–ª—è span –≤ DOM (—É–¥–æ–±–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫) --- */
function recomputeOffsetsFromOutput(){
  let idx = 0;
  function walk(node){
    if (node.nodeType === Node.TEXT_NODE){ idx += node.textContent.length; return; }
    if (node.nodeType === Node.ELEMENT_NODE){
      if (node.classList && node.classList.contains('error-underline')){
        node.dataset.offset = idx;
        node.dataset.length = node.textContent.length;
        idx += node.textContent.length;
      } else {
        node.childNodes.forEach(walk);
      }
    }
  }
  idx = 0;
  outputEl.childNodes.forEach(walk);
  correctedText = getOutputPlainText();
}

/* --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã: –æ–±–Ω–æ–≤–ª—è–µ–º –ª–µ–≤–æ–µ –ø–æ–ª–µ –∏ –ø—Ä–∞–≤—ã–π span, –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é, —É–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É --- */
function applyReplacement(offset, length, replacement, spanEl){
  // –æ–±–Ω–æ–≤–ª—è–µ–º –ª–µ–≤–æ–µ –ø–æ–ª–µ
  const before = correctedText.slice(0, parseInt(offset,10));
  const after = correctedText.slice(parseInt(offset,10) + parseInt(length,10));
  const next = before + replacement + after;
  inputEl.value = next;

  // –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤—ã–π span
  if (spanEl){
    spanEl.textContent = replacement;
    spanEl.classList.remove('error-underline');
    spanEl.classList.add('word-replaced');
  }

  // –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –≤—ã–∑–≤–∞—Ç—å backend —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ matches
  // –Ω–æ –º–æ–∂–Ω–æ –∏ –±–µ–∑ –Ω–µ–≥–æ; –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ ‚Äî –≤—ã–∑–æ–≤–µ–º checkNow()
  menu.style.display = 'none';
  // –£–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤–∏–∑—É–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  const key = spanEl ? spanEl.dataset.key : null;
  if (key){
    const card = errorsContainer.querySelector(`[data-key="${key}"]`);
    if (card){ card.classList.add('fade-out'); setTimeout(()=>card.remove(), 420); }
  }
  // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API (—Ç–∞–∫ backend –¥–∞—Å—Ç –Ω–æ–≤—ã–µ matches)
  checkNow();
}

/* --- –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è span --- */
function showSuggestMenuForSpan(spanEl){
  const opts = (spanEl.dataset.suggest || '').split('|').filter(Boolean);
  if (!opts.length) return;
  menu.innerHTML = '';
  opts.forEach(o=>{
    const it = document.createElement('div');
    it.className = 'suggest-option';
    it.textContent = o;
    it.addEventListener('click', (ev)=>{
      ev.stopPropagation();
      applyReplacement(spanEl.dataset.offset, spanEl.dataset.length, o, spanEl);
    });
    menu.appendChild(it);
  });
  const rect = spanEl.getBoundingClientRect();
  menu.style.left = (rect.left + window.scrollX) + 'px';
  menu.style.top = (rect.top + window.scrollY - (menu.offsetHeight || 40) - 6) + 'px';
  menu.style.display = 'block';
}

/* --- –ë–∏–Ω–¥—ã –¥–ª—è span --- */
function bindErrorSpans(){
  outputEl.querySelectorAll('.error-underline').forEach(span=>{
    if (span._bound) return;
    span._bound = true;
    span.addEventListener('click', e=>{
      e.stopPropagation();
      showSuggestMenuForSpan(span);
    });
  });
}

/* --- –ë–∏–Ω–¥—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ 'Pou≈æi≈•' --- */
function bindApplyButtons(){
  errorsContainer.querySelectorAll('.apply').forEach(btn=>{
    if (btn._bound) return;
    btn._bound = true;
    btn.addEventListener('click', ()=>{
      const card = btn.closest('[data-key]');
      const key = card.dataset.key;
      // –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π span –ø–æ data-key
      const span = outputEl.querySelector(`.error-underline[data-key="${key}"]`);
      if (span){
        const suggest = (span.dataset.suggest||'').split('|')[0] || span.textContent;
        applyReplacement(span.dataset.offset, span.dataset.length, suggest, span);
      } else {
        // –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º input –∏ –≤—ã–∑–æ–≤–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        checkNow();
      }
      btn.classList.add('apply-used');
      btn.textContent = 'Pou≈æit√©';
      btn.disabled = true;
    });
  });
}

/* --- –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è --- */
copyBtn.addEventListener('click', ()=>{
  const val = inputEl.value || '';
  navigator.clipboard.writeText(val).then(()=>{
    // –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–æ—Å—Ç –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π
    const top = copyBtn.offsetTop + copyBtn.offsetHeight + 8;
    copyToast.style.top = top + 'px';
    copyToast.textContent = `Skop√≠rovan√© (${val.length} znakov)`;
    copyToast.classList.add('show');
    setTimeout(()=> copyToast.classList.remove('show'), 1500);
  }).catch(()=>{ /* ignore */ });
});

/* --- –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–ª–∏–∫–æ–º –≤–Ω–µ --- */
document.addEventListener('click', e=>{
  if (!e.target.closest('.error-underline') && !e.target.closest('.suggest-menu')) menu.style.display = 'none';
});

/* --- –í—ã–∑–æ–≤ API: POST ${API}/check --- */
async function checkNow(){
  const text = inputEl.value || '';
  if (!text.trim()){
    outputEl.innerHTML = '';
    errorsContainer.innerHTML = '';
    return;
  }
  try {
    const res = await fetch(`${API}/check`, {
      method: 'POST',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({ text, language: 'sk-SK', level: 'picky' })
    });
    if (!res.ok) throw new Error('Network '+res.status);
    const data = await res.json();
    const original = data.text || text;
    lastMatches = data.matches || [];
    renderFromApiText(original, lastMatches);
    // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–µ–≤–æ–µ –ø–æ–ª–µ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–∞–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏ –ø–æ—Å–ª–µ –∞–ø–¥–µ–π—Ç–æ–≤)
    correctedText = getOutputPlainText();
    inputEl.value = correctedText;
  } catch(err) {
    console.error('check error', err);
    // –æ—Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–µ –ª–æ–º–∞–µ–º UX
  }
}

/* --- –î–µ–±–∞—É–Ω—Å –ø—Ä–∏ –≤–≤–æ–¥–µ --- */
const debouncedCheck = debounce(()=>checkNow(), 600);
inputEl.addEventListener('input', debouncedCheck);

/* --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --- */
document.addEventListener('DOMContentLoaded', ()=>{
  // –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º
  if (inputEl.value && inputEl.value.trim()) checkNow();
});
</script>
</body>
</html>
